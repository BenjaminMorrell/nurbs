***************
*** 48,56 ****
  template <class T>
  LUMatrix<T>& LUMatrix<T>::operator=(const LUMatrix<T>& a){
    resize(a.rows(),a.cols()) ;
-   for(int i=0;i<rows();++i)
-     for(int j=0;j<cols();++j)
-       elem(i,j) = a(i,j) ;
    pivot_ = a.pivot_ ;
    return *this ;
  }
--- 48,56 ----
  template <class T>
  LUMatrix<T>& LUMatrix<T>::operator=(const LUMatrix<T>& a){
    resize(a.rows(),a.cols()) ;
+   for(int i=0;i<this->rows();++i)
+     for(int j=0;j<this->cols();++j)
+       this->elem(i,j) = a(i,j) ;
    pivot_ = a.pivot_ ;
    return *this ;
  }
***************
*** 90,96 ****
    //	lu = a;	 must do it by copying or LUFACT will be recursively called !
    for(i=0;i<n;++i)
      for(j=0;j<n;++j)
-       elem(i,j) = a(i,j) ;
  
    errval = 0;
    nm1 = n - 1;
--- 90,96 ----
    //	lu = a;	 must do it by copying or LUFACT will be recursively called !
    for(i=0;i<n;++i)
      for(j=0;j<n;++j)
+       this->elem(i,j) = a(i,j) ;
  
    errval = 0;
    nm1 = n - 1;
***************
*** 129,152 ****
  	    }
  	  pivot_[k] = l;
  
- 	  if ( elem(l,k) != 0.0 )
  	    {			// nonsingular pivot found 
  	      if (l != k ){	// interchange needed 
  		for (i = k; i < n; i++)
  		  {
- 		    t = elem(l,i) ;
- 		    elem(l,i) = elem(k,i) ;
- 		    elem(k,i) = t ; 
  		  }
  		sign = -sign ;
  	      }
- 	      q =  elem(k,k);	/* scale row */
  	      for (i = kp1; i < n; i++)
  		{
- 		  t = - elem(i,k)/q;
- 		  elem(i,k) = t;
  		  for (j = kp1; j < n; j++)
- 		    elem(i,j) += t * elem(k,j);
  		}
  	    }
  	  else		/* pivot singular */
--- 129,152 ----
  	    }
  	  pivot_[k] = l;
  
+ 	  if ( this->elem(l,k) != 0.0 )
  	    {			// nonsingular pivot found 
  	      if (l != k ){	// interchange needed 
  		for (i = k; i < n; i++)
  		  {
+ 		    t = this->elem(l,i) ;
+ 		    this->elem(l,i) = this->elem(k,i) ;
+ 		    this->elem(k,i) = t ; 
  		  }
  		sign = -sign ;
  	      }
+ 	      q =  this->elem(k,k);	/* scale row */
  	      for (i = kp1; i < n; i++)
  		{
+ 		  t = - this->elem(i,k)/q;
+ 		  this->elem(i,k) = t;
  		  for (j = kp1; j < n; j++)
+ 		    this->elem(i,j) += t * this->elem(k,j);
  		}
  	    }
  	  else		/* pivot singular */
***************
*** 156,162 ****
      }
    
    pivot_[nm1] = nm1;
-   if (elem(nm1,nm1) == 0.0)
      errval = nm1;  
    return *this;
  }
--- 156,162 ----
      }
    
    pivot_[nm1] = nm1;
+   if (this->elem(nm1,nm1) == 0.0)
      errval = nm1;  
    return *this;
  }
***************
*** 196,204 ****
  */
  template <class T>
  T LUMatrix<T>::determinant(){
-   T det = elem(0,0) ;
-   for(int i=1;i<rows();++i)
-     det *= elem(i,i) ;
    return det * (T)sign ;
  }
  
--- 196,204 ----
  */
  template <class T>
  T LUMatrix<T>::determinant(){
+   T det = this->elem(0,0) ;
+   for(int i=1;i<this->rows();++i)
+     det *= this->elem(i,i) ;
    return det * (T)sign ;
  }
  
***************
*** 221,227 ****
        X(ip,j) = X(i,j) ;
        if(ii)
  	for(k=ii;k<i;++k)
- 	  sum -= elem(i,k)*X(k,j);
        else
  	if(sum)
  	  ii=i ;
--- 221,227 ----
        X(ip,j) = X(i,j) ;
        if(ii)
  	for(k=ii;k<i;++k)
+ 	  sum -= this->elem(i,k)*X(k,j);
        else
  	if(sum)
  	  ii=i ;
***************
*** 230,237 ****
      for(i=n-1;i>0;--i){ // doing forward substitution
        sum=X(i,j) ;
        for(k=i+1;k<n;++k)
- 	sum -= elem(i,k)*X(k,j) ;
-       X(i,j) = sum/elem(i,i) ;
      }
    }
  }
--- 230,237 ----
      for(i=n-1;i>0;--i){ // doing forward substitution
        sum=X(i,j) ;
        for(k=i+1;k<n;++k)
+ 	sum -= this->elem(i,k)*X(k,j) ;
+       X(i,j) = sum/this->elem(i,i) ;
      }
    }
  }
***************
*** 253,262 ****
    T ten;
    int i, j, k, l, kb, kp1, nm1, n, coln;
  
-   if ( rows() != cols() )
      {
  #ifdef USE_EXCEPTION
-     throw WrongSize2D(rows(),cols(),0,0) ;
  #else
        Error error("invm");
        error << "matrix inverse, not square: " << rows() << " by " << cols() << endl;
--- 253,262 ----
    T ten;
    int i, j, k, l, kb, kp1, nm1, n, coln;
  
+   if ( this->rows() != this->cols() )
      {
  #ifdef USE_EXCEPTION
+     throw WrongSize2D(this->rows(),this->cols(),0,0) ;
  #else
        Error error("invm");
        error << "matrix inverse, not square: " << rows() << " by " << cols() << endl;
***************
*** 264,270 ****
  #endif
      }
  
-   n = coln = rows();
  
  
    inv = *this ;
--- 264,270 ----
  #endif
      }
  
+   n = coln = this->rows();
  
  
    inv = *this ;
***************
*** 338,350 ****
  template <class T>
  Matrix<T> LUMatrix<T>::inverse() 
  {
-   if ( rows() != cols() )
      {
  #ifdef USE_EXCEPTION
-       throw WrongSize2D(rows(),cols(),0,0) ;
  #else
        Error error("invm");
-       error << "matrix inverse, not square: " << rows() << " by " << cols() << endl;
        error.fatal();
  #endif
      }
--- 338,350 ----
  template <class T>
  Matrix<T> LUMatrix<T>::inverse() 
  {
+   if ( this->rows() != this->cols() )
      {
  #ifdef USE_EXCEPTION
+       throw WrongSize2D(this->rows(),this->cols(),0,0) ;
  #else
        Error error("invm");
+       error << "matrix inverse, not square: " << this->rows() << " by " << this->cols() << endl;
        error.fatal();
  #endif
      }
