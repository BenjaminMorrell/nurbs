***************
*** 54,72 ****
    if ( this == &a )
      return *this;
    
-   if ( a.rows() != rows() || a.cols() != cols() ){
      resize(a.rows(),a.cols()) ;
    }
    
-   int sze = rows()*cols() ;
    T *ptr, *aptr ;
-   ptr = m-1 ;
    aptr = a.m-1 ;
    
    for (i = sze; i > 0; --i)
      *(++ptr) = *(++aptr) ;
    
-   by_columns = a.by_columns;
    
    return *this;
  }
--- 54,73 ----
    if ( this == &a )
      return *this;
    
+ 
+   if ( a.rows() != this->rows() || a.cols() != this->cols() ){
      resize(a.rows(),a.cols()) ;
    }
    
+   int sze = this->rows()*this->cols() ;
    T *ptr, *aptr ;
+   ptr = this->m-1 ;
    aptr = a.m-1 ;
    
    for (i = sze; i > 0; --i)
      *(++ptr) = *(++aptr) ;
    
+   this->by_columns = a.by_columns;
    
    return *this;
  }
***************
*** 100,109 ****
  {
    int rwz,coz,i,j;
    
-   if ( rows() % a.rows() != 0 || cols() % a.cols() != 0 || rows() < a.rows() || cols() < a.cols() )
      {
  #ifdef USE_EXCEPTION
-       throw WrongSize2D(rows(),cols(),a.rows(),a.cols()) ;
  #else
        Error error("Matrix<T>::submatrix");
        error << "Matrix and submatrix incommensurate" ;
--- 101,110 ----
  {
    int rwz,coz,i,j;
    
+   if ( this->rows() % a.rows() != 0 || this->cols() % a.cols() != 0 || this->rows() < a.rows() || this->cols() < a.cols() )
      {
  #ifdef USE_EXCEPTION
+       throw WrongSize2D(this->rows(),this->cols(),a.rows(),a.cols()) ;
  #else
        Error error("Matrix<T>::submatrix");
        error << "Matrix and submatrix incommensurate" ;
***************
*** 111,120 ****
  #endif
      }
    
-   if ( sr >= rows()/a.rows() || sr < 0 || sc >= cols()/a.cols() || sc < 0 )
      {
  #ifdef USE_EXCEPTION
-       throw OutOfBound2D(sr,sc,0,rows()/a.rows()-1,0,cols()/a.cols()-1) ;
  #else
        Error error("Matrix<T>::submatrix");
        error << "Submatrix location out of bounds.\nrowblock " << sr << ", " << rows()/a.rows() << " colblock " << sc << ", " << a.cols() << endl ;
--- 112,121 ----
  #endif
      }
    
+   if ( sr >= this->rows()/a.rows() || sr < 0 || sc >= this->cols()/a.cols() || sc < 0 )
      {
  #ifdef USE_EXCEPTION
+       throw OutOfBound2D(sr,sc,0,this->rows()/a.rows()-1,0,this->cols()/a.cols()-1) ;
  #else
        Error error("Matrix<T>::submatrix");
        error << "Submatrix location out of bounds.\nrowblock " << sr << ", " << rows()/a.rows() << " colblock " << sc << ", " << a.cols() << endl ;
***************
*** 133,139 ****
    aptr = a.m - 1;
    for ( i = a.rows()-1; i >= 0; --i )
      {
-       ptr = &m[(i+rwz)*cols()+coz]-1 ;
        for ( j = a.cols(); j > 0; --j)
  	*(++ptr) = *(++aptr) ;
      }  
--- 134,140 ----
    aptr = a.m - 1;
    for ( i = a.rows()-1; i >= 0; --i )
      {
+       ptr = &this->m[(i+rwz)*this->cols()+coz]-1 ;
        for ( j = a.cols(); j > 0; --j)
  	*(++ptr) = *(++aptr) ;
      }  
***************
*** 159,165 ****
    // Assign matrix a to this matrix at (i,j)
    int i, j;
    
-   if ( (rw + a.rows()) > rows() || ( cl + a.cols()) > cols()) {
  #ifdef USE_EXCEPTION
      throw MatrixErr();
  #else
--- 160,166 ----
    // Assign matrix a to this matrix at (i,j)
    int i, j;
    
+   if ( (rw + a.rows()) > this->rows() || ( cl + a.cols()) > this->cols()) {
  #ifdef USE_EXCEPTION
      throw MatrixErr();
  #else
***************
*** 177,183 ****
    T *pptr,*aptr ;
    aptr = a.m-1 ;
    for ( i = 0; i<a.rows(); ++i) {
-     pptr = &m[(i+rw)*cols()+cl]-1 ;
      for ( j = 0; j < a.cols(); ++j)
        *(++pptr) = *(++aptr);
    }
--- 178,184 ----
    T *pptr,*aptr ;
    aptr = a.m-1 ;
    for ( i = 0; i<a.rows(); ++i) {
+     pptr = &this->m[(i+rw)*this->cols()+cl]-1 ;
      for ( j = 0; j < a.cols(); ++j)
        *(++pptr) = *(++aptr);
    }
***************
*** 208,214 ****
  Matrix<T> Matrix<T>::get(int rw, int cl, int nr, int nc) const
  {
    Matrix<T> getmat(nr,nc) ;
-   if ( (rw+nr) > rows() || (cl+nc) > cols()) {
  #ifdef USE_EXCEPTION
      throw MatrixErr();
  #else
--- 209,215 ----
  Matrix<T> Matrix<T>::get(int rw, int cl, int nr, int nc) const
  {
    Matrix<T> getmat(nr,nc) ;
+   if ( (rw+nr) > this->rows() || (cl+nc) > this->cols()) {
  #ifdef USE_EXCEPTION
      throw MatrixErr();
  #else
***************
*** 228,234 ****
    T *pptr,*aptr ;
    aptr = getmat.m-1;
    for (i = 0; i < nr; ++i) {
-     pptr = &m[(i+rw)*cols()+cl]-1 ;
      for ( j = 0; j < nc; ++j)
        *(++aptr) = *(++pptr) ;
    }
--- 229,235 ----
    T *pptr,*aptr ;
    aptr = getmat.m-1;
    for (i = 0; i < nr; ++i) {
+     pptr = &this->m[(i+rw)*this->cols()+cl]-1 ;
      for ( j = 0; j < nc; ++j)
        *(++aptr) = *(++pptr) ;
    }
***************
*** 252,262 ****
    double sum, maxsum;
    int init=0 ;
    T *pptr ;
-   pptr = m-1 ;
    maxsum = 0 ; // Silence the warning message
-   for(i=0;i<rows();++i){
      sum = 0 ;
-     for ( j = 0; j < cols(); ++j) 
        sum += *(++pptr) ;
      if(init)
        maxsum = (maxsum>sum) ? maxsum : sum;
--- 253,263 ----
    double sum, maxsum;
    int init=0 ;
    T *pptr ;
+   pptr = this->m-1 ;
    maxsum = 0 ; // Silence the warning message
+   for(i=0;i<this->rows();++i){
      sum = 0 ;
+     for ( j = 0; j < this->cols(); ++j) 
        sum += *(++pptr) ;
      if(init)
        maxsum = (maxsum>sum) ? maxsum : sum;
***************
*** 285,296 ****
  {
    int i, iend;
    
-   iend = rows();
-   if ( iend > cols() )
-     iend = cols();
    
    for (i = iend-1; i >=0; --i)
-     elem(i,i) = a;
  
  }
  
--- 286,297 ----
  {
    int i, iend;
    
+   iend = this->rows();
+   if ( iend > this->cols() )
+     iend = this->cols();
    
    for (i = iend-1; i >=0; --i)
+     this->elem(i,i) = a;
  
  }
  
***************
*** 308,317 ****
  template <class T>
  Vector<T> Matrix<T>::getDiag(){
    int i, iend;
-   Vector<T> vec(minimum(rows(),cols())) ;
-   iend = minimum(rows(),cols());
    for (i = iend-1; i >=0; --i)
-       vec[i] = elem(i,i);
    return vec ;
  }
  
--- 309,318 ----
  template <class T>
  Vector<T> Matrix<T>::getDiag(){
    int i, iend;
+   Vector<T> vec(minimum(this->rows(),this->cols())) ;
+   iend = minimum(this->rows(),this->cols());
    for (i = iend-1; i >=0; --i)
+       vec[i] = this->elem(i,i);
    return vec ;
  }
  
***************
*** 328,335 ****
  Matrix<T>& Matrix<T>::operator+=(double a)
  {
    T *p1 ;
-   p1 = m-1 ;
-   const int size = rows()*cols() ;
    for(int i=size; i>0; --i)
      *(++p1) += a ;  
    return *this ;
--- 329,336 ----
  Matrix<T>& Matrix<T>::operator+=(double a)
  {
    T *p1 ;
+   p1 = this->m-1 ;
+   const int size = this->rows()*this->cols() ;
    for(int i=size; i>0; --i)
      *(++p1) += a ;  
    return *this ;
***************
*** 348,355 ****
  Matrix<T>& Matrix<T>::operator-=(double a)
  {
    T *p1 ;
-   p1 = m-1 ;
-   const int size = rows()*cols() ;
    for(int i=size; i>0; --i)
      *(++p1) -= a ;  
    return *this ;
--- 349,356 ----
  Matrix<T>& Matrix<T>::operator-=(double a)
  {
    T *p1 ;
+   p1 = this->m-1 ;
+   const int size = this->rows()*this->cols() ;
    for(int i=size; i>0; --i)
      *(++p1) -= a ;  
    return *this ;
***************
*** 368,375 ****
  Matrix<T>& Matrix<T>::operator*=(double a)
  {
    T *p1 ;
-   p1 = m-1 ;
-   const int size = rows()*cols() ;
    for(int i=size; i>0; --i)
      *(++p1) *= a ;  
    return *this ;
--- 369,376 ----
  Matrix<T>& Matrix<T>::operator*=(double a)
  {
    T *p1 ;
+   p1 = this->m-1 ;
+   const int size = this->rows()*this->cols() ;
    for(int i=size; i>0; --i)
      *(++p1) *= a ;  
    return *this ;
***************
*** 388,395 ****
  Matrix<T>& Matrix<T>::operator/=(double a)
  {
    T *p1 ;
-   p1 = m-1 ;
-   const int size = rows()*cols() ;
    for(int i=size; i>0; --i)
      *(++p1) /= a ;  
    return *this ;
--- 389,396 ----
  Matrix<T>& Matrix<T>::operator/=(double a)
  {
    T *p1 ;
+   p1 = this->m-1 ;
+   const int size = this->rows()*this->cols() ;
    for(int i=size; i>0; --i)
      *(++p1) /= a ;  
    return *this ;
***************
*** 408,422 ****
  template <class T> 
  Matrix<T>& Matrix<T>::operator+=(const Matrix<T> &a)
  {
-   if ( a.rows() != rows() || a.cols() != cols() )
      {
  #ifdef USE_EXCEPTION
-       throw WrongSize2D(rows(),cols(),a.rows(),a.cols());
  #else
        Error error("Matrix<T>::operator+=") ;
-       if ( rows() != a.rows() )
  	error << "Matrices are of diferent size, a.rows() = " << rows() << " and b.rows() = " << a.rows() << endl ;
-       if ( cols() != a.cols())
  	error << "Matrices are of diferent size, a.cols() = " << cols() << " and b.cols() = " << a.cols() << endl ;
        error.fatal() ;
  #endif
--- 409,423 ----
  template <class T> 
  Matrix<T>& Matrix<T>::operator+=(const Matrix<T> &a)
  {
+   if ( a.rows() != this->rows() || a.cols() != this->cols() )
      {
  #ifdef USE_EXCEPTION
+       throw WrongSize2D(this->rows(),this->cols(),a.rows(),a.cols());
  #else
        Error error("Matrix<T>::operator+=") ;
+       if ( this->rows() != a.rows() )
  	error << "Matrices are of diferent size, a.rows() = " << rows() << " and b.rows() = " << a.rows() << endl ;
+       if ( this->cols() != a.cols())
  	error << "Matrices are of diferent size, a.cols() = " << cols() << " and b.cols() = " << a.cols() << endl ;
        error.fatal() ;
  #endif
***************
*** 425,432 ****
    int i, sze ;
    T *aptr,*sptr ;
    aptr = a.m - 1 ;
-   sptr = m - 1 ;
-   sze = rows()*cols() ;
    for (i = sze; i > 0; --i){
        *(++sptr) += *(++aptr) ;
    }
--- 426,433 ----
    int i, sze ;
    T *aptr,*sptr ;
    aptr = a.m - 1 ;
+   sptr = this->m - 1 ;
+   sze = this->rows()*this->cols() ;
    for (i = sze; i > 0; --i){
        *(++sptr) += *(++aptr) ;
    }
***************
*** 468,482 ****
  template <class T> 
  Matrix<T>& Matrix<T>::operator-=(const Matrix<T> &a)
  {
-   if ( a.rows() != rows() || a.cols() != cols() )
      {
  #ifdef USE_EXCEPTION
-       throw WrongSize2D(rows(),cols(),a.rows(),a.cols());
  #else
        Error error("Matrix<T>::operator-=") ;
-       if ( rows() != a.rows() )
  	error << "Matrices are of diferent size, a.rows() = " << rows() << " and b.rows() = " << a.rows() << endl ;
-       if ( cols() != a.cols())
  	error << "Matrices are of diferent size, a.cols() = " << cols() << " and b.cols() = " << a.cols() << endl ;
        error.fatal() ;
  #endif
--- 469,483 ----
  template <class T> 
  Matrix<T>& Matrix<T>::operator-=(const Matrix<T> &a)
  {
+   if ( a.rows() != this->rows() || a.cols() != this->cols() )
      {
  #ifdef USE_EXCEPTION
+       throw WrongSize2D(this->rows(),this->cols(),a.rows(),a.cols());
  #else
        Error error("Matrix<T>::operator-=") ;
+       if ( this->rows() != a.rows() )
  	error << "Matrices are of diferent size, a.rows() = " << rows() << " and b.rows() = " << a.rows() << endl ;
+       if ( this->cols() != a.cols())
  	error << "Matrices are of diferent size, a.cols() = " << cols() << " and b.cols() = " << a.cols() << endl ;
        error.fatal() ;
  #endif
***************
*** 485,492 ****
    int i, size;
    T *aptr,*sptr ;
    aptr = a.m - 1 ;
-   sptr = m - 1 ;
-   size = rows()*cols() ;
    for (i = size; i > 0; --i){
        *(++sptr) -= *(++aptr) ;
    }
--- 486,493 ----
    int i, size;
    T *aptr,*sptr ;
    aptr = a.m - 1 ;
+   sptr = this->m - 1 ;
+   size = this->rows()*this->cols() ;
    for (i = size; i > 0; --i){
        *(++sptr) -= *(++aptr) ;
    }
***************
*** 742,755 ****
  template <class T>
  T Matrix<T>::trace() const
  {
-   int size = rows();
    T sum = (T)0;
    
-   if ( size > cols() )
-     size = cols();
    
    for (int d = 0; d < size; ++d)
-     sum += elem(d,d) ;
    
    return sum;
  }
--- 743,756 ----
  template <class T>
  T Matrix<T>::trace() const
  {
+   int size = this->rows();
    T sum = (T)0;
    
+   if ( size > this->cols() )
+     size = this->cols();
    
    for (int d = 0; d < size; ++d)
+     sum += this->elem(d,d) ;
    
    return sum;
  }
***************
*** 770,781 ****
  template <class T>
  Matrix<T> Matrix<T>::herm() const
  {
-   int i, j, r = cols(), c = rows();
    Matrix<T> adj(r,c);
    
    for (i = 0; i < r; ++i)
      for (j = 0; j < c; ++j)
-       adj.elem(i,j) = elem(j,i) ;
  
    return adj;
  
--- 771,782 ----
  template <class T>
  Matrix<T> Matrix<T>::herm() const
  {
+   int i, j, r = this->cols(), c = this->rows();
    Matrix<T> adj(r,c);
    
    for (i = 0; i < r; ++i)
      for (j = 0; j < c; ++j)
+       adj.elem(i,j) = this->elem(j,i) ;
  
    return adj;
  
***************
*** 794,804 ****
  template <class T>
  Matrix<T> Matrix<T>::flop() const
  {					
-   Matrix<T> f(rows(),cols()) ;
-   for(int i=rows()-1;i>=0;--i)
-     for(int j=cols()-1;j>=0;--j)
        {
- 	f(i,j) = elem(i,cols()-j-1);
        }
    return f; 
  }
--- 795,805 ----
  template <class T>
  Matrix<T> Matrix<T>::flop() const
  {					
+   Matrix<T> f(this->rows(),this->cols()) ;
+   for(int i=this->rows()-1;i>=0;--i)
+     for(int j=this->cols()-1;j>=0;--j)
        {
+ 	f(i,j) = this->elem(i,this->cols()-j-1);
        }
    return f; 
  }
***************
*** 817,829 ****
  {					
    // same as hermitian for real Matrix<T>
    int i, j;
-   const int& r = cols();
-   const int& c = rows();
    Matrix<T> adj(r,c);
    
    for (i = r-1; i >=0; --i)
      for (j = c-1; j >=0; --j)
-       adj.elem(i,j) = elem(j,i) ;
    
    
    return adj; 
--- 818,830 ----
  {					
    // same as hermitian for real Matrix<T>
    int i, j;
+   const int& r = this->cols();
+   const int& c = this->rows();
    Matrix<T> adj(r,c);
    
    for (i = r-1; i >=0; --i)
      for (j = c-1; j >=0; --j)
+       adj.elem(i,j) = this->elem(j,i) ;
    
    
    return adj; 
***************
*** 844,850 ****
  int Matrix<T>::read(char* filename) {
    ifstream fin(filename) ;
    if(!fin) {
-     resize(1,1) ;
      return 0 ;
    }
    int r,c ;
--- 845,851 ----
  int Matrix<T>::read(char* filename) {
    ifstream fin(filename) ;
    if(!fin) {
+     this->resize(1,1) ;
      return 0 ;
    }
    int r,c ;
***************
*** 855,862 ****
    if(r) return 0 ;
    if(!fin.read((char*)&r,sizeof(int))) return 0 ;
    if(!fin.read((char*)&c,sizeof(int))) return 0 ;
-   resize(r,c) ;
-   if(!fin.read((char*)m,sizeof(T)*r*c)) return 0 ;
  
    delete []type ;
    return 1 ;
--- 856,863 ----
    if(r) return 0 ;
    if(!fin.read((char*)&r,sizeof(int))) return 0 ;
    if(!fin.read((char*)&c,sizeof(int))) return 0 ;
+   this->resize(r,c) ;
+   if(!fin.read((char*)this->m,sizeof(T)*r*c)) return 0 ;
  
    delete []type ;
    return 1 ;
***************
*** 877,887 ****
  int Matrix<T>::read(char* filename,int r, int c) {
    ifstream fin(filename) ;
    if(!fin) {
-     resize(1,1) ;
      return 0 ;
    }
-   resize(r,c) ;
-   if(!fin.read((char*)m,sizeof(T)*r*c)) return 0 ;
  
    return 1 ;
  }
--- 878,888 ----
  int Matrix<T>::read(char* filename,int r, int c) {
    ifstream fin(filename) ;
    if(!fin) {
+     this->resize(1,1) ;
      return 0 ;
    }
+   this->resize(r,c) ;
+   if(!fin.read((char*)this->m,sizeof(T)*r*c)) return 0 ;
  
    return 1 ;
  }
***************
*** 904,914 ****
    if(!fout)
      return 0 ;
    int r,c ;
-   r = rows() ; c = cols() ;
    if(!fout.write((char*)&"matrix",sizeof(char)*6)) return 0 ;
    if(!fout.write((char*)&r,sizeof(int))) return 0 ;
    if(!fout.write((char*)&c,sizeof(int))) return 0 ;
-   if(!fout.write((char*)m,sizeof(T)*r*c)) return 0 ;
    return 1;
  }
  
--- 905,915 ----
    if(!fout)
      return 0 ;
    int r,c ;
+   r = this->rows() ; c = this->cols() ;
    if(!fout.write((char*)&"matrix",sizeof(char)*6)) return 0 ;
    if(!fout.write((char*)&r,sizeof(int))) return 0 ;
    if(!fout.write((char*)&c,sizeof(int))) return 0 ;
+   if(!fout.write((char*)this->m,sizeof(T)*r*c)) return 0 ;
    return 1;
  }
  
***************
*** 927,933 ****
    ofstream fout(filename) ;
    if(!fout)
      return 0 ;
-   if(!fout.write((char*)m,sizeof(T)*rows()*cols())) return 0 ;
    return 1;
  }
  
--- 928,934 ----
    ofstream fout(filename) ;
    if(!fout)
      return 0 ;
+   if(!fout.write((char*)this->m,sizeof(T)*this->rows()*this->cols())) return 0 ;
    return 1;
  }
  
